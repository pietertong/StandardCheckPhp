<?php
// +----------------------------------------------------------------------------------------------------------------
// | 1、代码文件必须以 <?php 或 <?= 标签开始，在PHP代码中统一使用<?php,在模板中统一使用<?=
// +----------------------------------------------------------------------------------------------------------------
// | 2、PHP代码文件必须以 不带BOM的 UTF-8 编码；
// +----------------------------------------------------------------------------------------------------------------
// | 3、遵循框架命名规则;
//      否则使用如下文件命名方式,文件大小最多不超过100M：
//      日志实例：runtime/log/201701/01/error.01.log
//      缓存实例：runtime/cache/201701/01/date.01.cache
// +----------------------------------------------------------------------------------------------------------------
// | 4、类的命名必须遵循 StudlyCaps 大写开头的驼峰命名规范；
// +----------------------------------------------------------------------------------------------------------------
// | 5、方法名称必须符合 camelCase 式的小写开头驼峰命名规范。
// +----------------------------------------------------------------------------------------------------------------
// | 6、类中的常量所有字母都必须大写，单词间用下划线分隔；
// +----------------------------------------------------------------------------------------------------------------
// | 7、方法名称必须符合 camelCase 式的小写开头驼峰命名规范；
// +----------------------------------------------------------------------------------------------------------------
//| 8、非空行后一定不能有多余的空格符
// +----------------------------------------------------------------------------------------------------------------
/**
 * Class Name Standphp.php
 * @author     : zhaotong
 * @email      : zhaotong <zhaotongkp#163.com>
 * @date       : 2017/1/19 14:27
 * @description: 标准PHP SR-2/4实例
 */
namespace standphpclass;

/**
 * namespace 要与use 之间有空白行
 */
use StandNameSpacePhp;

/**
 * PHP代码中 必须是：true/false/null 不能是其他情况
 * 类的属性命名可以遵循
 * 大写开头的驼峰式 ($StudlyCaps)、小写开头的驼峰式 ($camelCase) 又或者是 下划线分隔式 ($under_score)，
 * 本规范不做强制要求，但无论遵循哪种命名方式，
 * 都应该在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。
 */
//关键词extends和implements必须写在类名称的同一行。类的开始花括号必须独占一行，结束花括号也必须在类主体后独占一行。

class StandPhp extends StandNameSpacePhp
{
    /**
     * const 常量要大写，并且多个单词直接要用‘_’相连接
     */
    /**
     * VERSION：版本号 string default 1.0
     */
    const VERSION = '1.0';
    /**
     * DATE_APPROVED 提供的日期 string default 2012-06-01
     */
    const DATE_APPROVED = '2012-06-01';
    /**
     * stander php
     * @type boolean true|false
     */
    protected $standerPhp = true;

    /**
     * 简单函数实例
     * @param $a
     * @param null $b
     */
    //所有方法都必须添加访问修饰符。
    public function sampleFunction($a, $b = null)
    {
        if ($a === $b) {
            bar();
        } elseif ($a > $b) {
            $foo = new foo();
            $foo->bar('small');
        } else {
            BazClass::bar($a, $b);
        }
    }

    /**
     * 字符串一行要保持80个，最长120个字符
     * 需要添加abstract或final声明时， 必须写在访问修饰符前，而static则必须写在其后。
     */
    final public static function bar()
    {
        // method body
        echo '类的属性命名可以遵循大写开头的驼峰式 ($StudlyCaps)、小写开头的驼峰式 ($camelCase) ' .
            '又或者是 下划线分隔式 ($under_score)，本规范不做强制要求，但无论遵循哪种命名方式，' .
            '都应该在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。';
    }

    /**
     * 参数列表可以分列成多行，这样，包括第一个参数在内的每个参数都必须单独成行。拆分成多行的参数列表后，
     * 结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。
     */
    /**
     * @param \standphpclass\ClassTypeHint $arg1
     * @param $arg2
     * @param array $arg3
     */
    public function aVeryLongMethodName(
        ClassTypeHint $arg1,
        &$arg2,
        array $arg3 = []
    ) {
        // method body
    }
}

/**
 * 类文件及functions.php 文件，文件末尾不能写 ?> ,并且要留有空白行
 * 纯PHP代码文件必须省略最后的?>结束标签。
 */